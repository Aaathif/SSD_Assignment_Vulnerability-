import React from 'react';
import { useFormik } from 'forà·“mik';
import * as Yup from 'yup';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import './SignUpPage.css';
import { toast } from 'react-toastify';
import DOMPurify from 'dompurify';

function SignUpPage() {
  const navigate = useNavigate();

  // Form validation schema using Yup
  const validationSchema = Yup.object({
    username: Yup.string().required('Username is required').min(4, 'Username must be at least 4 characters'),
    password: Yup.string().required('Password is required')
      .min(8, 'Password must be at least 8 characters')
      .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/, "Password must contain at least one uppercase letter, one lowercase letter, and one number"),
    email: Yup.string().email('Invalid email address').required('Email is required'),
    firstName: Yup.string().required('First name is required'),
    lastName: Yup.string().required('Last name is required'),
    phone: Yup.string().required('Phone number is required').matches(/^\d{10}$/, 'Phone number must be 10 digits'),
    address: Yup.string().required('Address is required'),
    city: Yup.string().required('City is required'),
    country: Yup.string().required('Country is required')
  });

  // Formik hook
  const formik = useFormik({
    initialValues: {
      username: '',
      password: '',
      email: '',
      firstName: '',
      lastName: '',
      phone: '',
      address: '',
      city: '',
      country: ''
    },
    validationSchema,
    onSubmit: async (values) => {
      // Sanitize data before sending to the server
      const sanitizedValues = Object.keys(values).reduce((acc, key) => {
        acc[key] = DOMPurify.sanitize(values[key]);
        return acc;
      }, {});

      const signupData = {
        ...sanitizedValues,
        learnerId: 0,
        signupRequest: {
          username: sanitizedValues.username,
          email: sanitizedValues.email,
          password: sanitizedValues.password,
          roles: ['admin'] // Assuming 'ROLE_USER' as a default role; adjust as necessary
        }
      };

      try {
        const response = await axios.post('http://localhost:8090/api/learner', signupData);
        if (response.data.status === 'CREATED') {
          toast.success('Account created successfully!');
          navigate('/login');
        } else {
          toast.error(response.data.message || 'Registration failed.');
        }
      } catch (error) {
        toast.error(error.response?.data?.message || 'Failed to sign up.');
      }
    },
  });

  return (
    <div className="signup-page">
      <div className="signup-container">
        <img src="/Edulogo.png" alt="EduHub Logo" className="signuplogo" />
        <form onSubmit={formik.handleSubmit}>
          <div>
            <label htmlFor="username">Username:</label>
            <input
              type="text"
              id="username"
              {...formik.getFieldProps('username')}
              required
            />
            {formik.touched.username && formik.errors.username ? (
              <div className="error">{formik.errors.username}</div>
            ) : null}
          </div>
          <div>
            <label htmlFor="password">Password:</label>
            <input
              type="password"
              id="password"
              {...formik.getFieldProps('password')}
              required
            />
            {formik.touched.password && formik.errors.password ? (
              <div className="error">{formik.errors.password}</div>
            ) : null}
          </div>
          <div>
            <label htmlFor="email">Email:</label>
            <input
              type="email"
              id="email"
              {...formik.getFieldProps('email')}
              required
            />
            {formik.touched.email && formik.errors.email ? (
              <div className="error">{formik.errors.email}</div>
            ) : null}
          </div>
          <div>
            <label htmlFor="firstName">First Name:</label>
            <input
              type="text"
              id="firstName"
              {...formik.getFieldProps('firstName')}
              required
            />
            {formik.touched.firstName && formik.errors.firstName ? (
              <div className="error">{formik.errors.firstName}</div>
            ) : null}
          </div>
          <div>
            <label htmlFor="lastName">Last Name:</label>
            <input
              type="text"
              id="lastName"
              {...formik.getFieldProps('lastName')}
              required
            />
            {formik.touched.lastName && formik.errors.lastName ? (
              <div className="error">{formik.errors.lastName}</div>
            ) : null}
          </div>
          <div>
            <label htmlFor="phone">Phone:</label>
            <input
              type="text"
              id="phone"
              {...formik.getFieldProps('phone')}
              required
            />
            {formik.touched.phone && formik.errors.phone ? (
              <div className="error">{formik.errors.phone}</div>
            ) : null}
          </div>
          <div>
            <label htmlFor="address">Address:</label>
            <input
              type="text"
              id="address"
              {...formik.getFieldProps('address')}
              required
            />
            {formik.touched.address && formik.errors.address ? (
              <div className="error">{formik.errors.address}</div>
            ) : null}
          </div>
          <div>
            <label htmlFor="city">City:</label>
            <input
              type="text"
              id="city"
              {...formik.getFieldProps('city')}
              required
            />
            {formik.touched.city && formik.errors.city ? (
              <div className="error">{formik.errors.city}</div>
            ) : null}
          </div>
          <div>
            <label htmlFor="country">Country:</label>
            <input
              type="text"
              id="country"
              {...formik.getFieldProps('country')}
              required
            />
            {formik.touched.country && formik.errors.country ? (
              <div className="error">{formik.errors.country}</div>
            ) : null}
          </div>
          <button type="submit" className="signup-button">Sign Up</button>
        </form>
        <a href="/login" className="login-link">Already have an account? Log In</a>
      </div>
    </div>
  );
}

export default SignUpPage;
