import React, { useState } from "react";
import InstructorSidebar from "../../../components/InstructorSidebar";
import Stepper from "@mui/material/Stepper";
import Step from "@mui/material/Step";
import StepLabel from "@mui/material/StepLabel";
import "./AddCourse.css";
import { toast } from 'react-toastify';
import axios from "axios";
import DOMPurify from 'dompurify';

const steps = [
  "Basic Info",
  "Outcomes & Structure",
  "Main Topics & Subtopics",
  "Complete",
];

const AddCourse = () => {
  const [sidebarVisible, setSidebarVisible] = useState(true);
  const [activeStep, setActiveStep] = useState(0);

  const toggleSidebar = () => setSidebarVisible(!sidebarVisible);


  const handleNext = () =>
    setActiveStep((prevActiveStep) => prevActiveStep + 1);
  const handleBack = () =>
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  const handleReset = () => setActiveStep(0);

 
  const [courseTitle, setCourseTitle] = useState("");
  const [titleImage, setTitleImage] = useState(null);
  const [outcomes, setOutcomes] = useState(["", "", ""]);
  const [structure, setStructure] = useState("");

  const handleFileValidation = (file, allowedTypes) => {
    if (!allowedTypes.includes(file.type)) {
      toast.error(`File type ${file.type} is not permitted.`);
      return false;
    }
    const fileSize = file.size / 1024 / 1024; // Size in MB
    if (fileSize > 5) {
      toast.error("File size exceeds limit (5MB).");
      return false;
    }
    return true;
  };
  const handleSubtopicChange = (topicIndex, subtopicIndex, key, event) => {
    let file = event.target.files[0];
    let allowedTypes = [];

    // Specify allowed file types for each category
    if (key === 'video') {
      allowedTypes = ['video/mp4'];
    } else if (key === 'slides') {
      allowedTypes = ['application/pdf'];
    } else if (key === 'notes') {
      allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];
    } 
    
    if (file && handleFileValidation(file, allowedTypes)) {
      const newTopics = [...mainTopics];
      newTopics[topicIndex].subtopics[subtopicIndex][key] = file;
      setMainTopics(newTopics);
    }
};

  const handleTitleChange = (e) => setCourseTitle(DOMPurify.sanitize(e.target.value));
  const handleImageChange = (event) => {
    const file = event.target.files[0];
    const allowedImageTypes = ['image/jpeg', 'image/png'];

    if (file && handleFileValidation(file, allowedImageTypes)) {
        setTitleImage(file);
    } else {
        setTitleImage(null); // Clear the current image if the new file is invalid
        toast.error("Invalid file type or size. Please upload a JPEG or PNG file under 5MB.");
    }
};

  const handleOutcomeChange = (index, value) => {
    const newOutcomes = [...outcomes];
    newOutcomes[index] = DOMPurify.sanitize(value);
    setOutcomes(newOutcomes);
  };
  
  const initialSubtopic = { title: "", video: null, slides: null, notes: null };
  const initialQuizQuestion = {
    question: "",
    answers: ["", "", "", ""],
    correctAnswer: 0,
  };
  const initialTopic = {
    title: "",
    description: "",
    subtopics: [initialSubtopic],
    quiz: [initialQuizQuestion],
  };
  const [mainTopics, setMainTopics] = useState([initialTopic]);

  const addMainTopic = () =>
    setMainTopics([...mainTopics, { ...initialTopic }]);

  const addSubtopic = (topicIndex) => {
    const newTopics = [...mainTopics];
    newTopics[topicIndex].subtopics.push({ ...initialSubtopic });
    setMainTopics(newTopics);
  };

  const addQuizQuestion = (topicIndex) => {
    const newTopics = [...mainTopics];
    newTopics[topicIndex].quiz.push({ ...initialQuizQuestion });
    setMainTopics(newTopics);
  };

  // const handleTopicChange = (index, key, value) => {
  //   const newTopics = [...mainTopics];
  //   newTopics[index][key] = value;
  //   setMainTopics(newTopics);
  // };

  const handleTopicChange = (index, key, value) => {
    const newTopics = [...mainTopics];
    newTopics[index][key] = DOMPurify.sanitize(value);
    setMainTopics(newTopics);
  };

  // const handleSubtopicChange = (topicIndex, subtopicIndex, key, value) => {
  //   const newTopics = [...mainTopics];
  //   newTopics[topicIndex].subtopics[subtopicIndex][key] = DOMPurify.sanitize(value);
  //   setMainTopics(newTopics);
  // };

  const handleQuizQuestionChange = (topicIndex, questionIndex, key, value) => {
    const newTopics = [...mainTopics];
    if (key === "answers") {
      newTopics[topicIndex].quiz[questionIndex][key][value.index] = DOMPurify.sanitize(value.t);
    } else {
      newTopics[topicIndex].quiz[questionIndex][key] = DOMPurify.sanitize(value);
    }
    setMainTopics(newTopics);
  };


  const handleSubmit = (event) => {
    event.preventDefault();
    console.log({
      courseTitle,
      titleImage,
      outcomes,
      structure,
      mainTopics,
    });
  };

  const handleSubmits = async (event) => {
    event.preventDefault();
    const formData = new FormData();
    formData.append("data", JSON.stringify({
      courseId: 0, // Assuming courseId is auto-generated or not needed for this request
      title: courseTitle,
      outcomes,
      structure,
      mainTopics
    }));

    if (titleImage) {
      formData.append("files", titleImage, titleImage.name);
    }

    try {
      const response = await axios.post("http://localhost:8090/api/course/with-file", formData, {
        headers: {
          "Content-Type": "multipart/form-data"
        }
      });
      console.log("Success:", response.data);
    } catch (error) {
      console.error("Error:", error.response?.data || error.message);
    }
  };
  


  const renderStepContent = (step) => {
    switch (step) {
      case 0:
        return (
          <div className="basic-info">
            <label>
              Course Title:
              <input
                type="text"
                value={courseTitle}
                onChange={handleTitleChange}
                required
              />
            </label>
            <label>
              Title Image:
              <input
                type="file"
                accept="image/*"
                onChange={handleImageChange}
                required
              />
            </label>
          </div>
        );
      case 1:
        return (
          <div className="outcomes-structure">
            <h3>Outcomes</h3>
            {outcomes.map((outcome, index) => (
              <input
                key={index}
                type="text"
                value={outcome}
                onChange={(e) => handleOutcomeChange(index, e.target.value)}
                placeholder={`Outcome ${index + 1}`}
                required
              />
            ))}
            <label>
              Structure (2-3 lines):
              <textarea
                value={structure}
                onChange={(e) => setStructure(e.target.value)}
                required
              />
            </label>
          </div>
        );
      case 2:
        return (
          <div className="main-topics">
            <h3>Main Topics</h3>
            {mainTopics.map((topic, index) => (
              <div key={index} className="topic-box">
                <label>
                  Topic {index + 1}: 
                  <br></br>
                  <input
                    type="text"
                    value={topic.title}
                    onChange={(e) =>
                      handleTopicChange(index, "title", e.target.value)
                    }
                    required
                  />
                </label>
                <label>
                  Description (2-3 lines):
                  <textarea
                    value={topic.description}
                    onChange={(e) =>
                      handleTopicChange(index, "description", e.target.value)
                    }
                    required
                  />
                </label>

              
                <h5>Subtopics</h5>
                {topic.subtopics.map((subtopic, subIndex) => (
                  <div key={subIndex} className="subtopic-box">
                    <label>
                      Subtopic {index + 1}.{subIndex + 1}:{" "}
                      
                      <input
                        type="text"
                        value={subtopic.title}
                        onChange={(e) =>
                          handleSubtopicChange(
                            index,
                            subIndex,
                            "title",
                            e.target.value
                          )
                        }
                        required
                      />
                    </label>
                    <label>
                      Lecture Video:
                      <input
                        type="file"
                        accept="video/*"
                        onChange={(e) =>
                          handleSubtopicChange(
                            index,
                            subIndex,
                            "video",
                            e.target.files[0]
                          )
                        }
                      />
                    </label>
                    <label>
                      Lecture Slides:
                      <input
                        type="file"
                        accept=".pdf,.pptx"
                        onChange={(e) =>
                          handleSubtopicChange(
                            index,
                            subIndex,
                            "slides",
                            e.target.files[0]
                          )
                        }
                      />
                    </label>
                    <label>
                      Lecture Notes:
                      <input
                        type="file"
                        accept=".pdf,.docx"
                        onChange={(e) =>
                          handleSubtopicChange(
                            index,
                            subIndex,
                            "notes",
                            e.target.files[0]
                          )
                        }
                      />
                    </label>
                  </div>
                ))}
                <button type="button" onClick={() => addSubtopic(index)}>
                  Add Another Subtopic
                </button>

             
                <h5>Quiz Questions</h5>
                {topic.quiz.map((question, qIndex) => (
                  <div key={qIndex} className="quiz-box">
                    <label>
                      Question {qIndex + 1}: 
                      <br></br>
                      <input
                        type="text"
                        value={question.question}
                        onChange={(e) =>
                          handleQuizQuestionChange(
                            index,
                            qIndex,
                            "question",
                            e.target.value
                          )
                        }
                        required
                      />
                    </label>
                    <h6>Answers:</h6>
                    {question.answers.map((answer, aIndex) => (
                      <input
                        key={aIndex}
                        type="text"
                        value={answer}
                        onChange={(e) =>
                          handleQuizQuestionChange(index, qIndex, "answers", {
                            index: aIndex,
                            text: e.target.value,
                          })
                        }
                        placeholder={`Answer ${aIndex + 1}`}
                        required
                      />
                    ))}
                    <label>
                      Correct Answer Index (0-3):
                      <input
                        type="number"
                        min="0"
                        max="3"
                        value={question.correctAnswer}
                        onChange={(e) =>
                          handleQuizQuestionChange(
                            index,
                            qIndex,
                            "correctAnswer",
                            e.target.value
                          )
                        }
                        required
                      />
                    </label>
                  </div>
                ))}
                <button type="button" onClick={() => addQuizQuestion(index)}>
                  Add Another Quiz Question
                </button>
              </div>
            ))}
            <div className="stepper-buttons">
              <button type="button" onClick={addMainTopic}>
                Add Another Main Topic
              </button>
            </div>
          </div>
        );

      default:
        return "Click complete to add your new course";
    }
  };

  return (
    <div className={`add-course-page ${sidebarVisible ? "with-sidebar" : ""}`}>
      
      <header className={`header ${sidebarVisible ? "shifted" : ""}`}>
        <div className="header-content">
          <button className="menu-btn" onClick={toggleSidebar}>
            ☰
          </button>
          <img src="/Edulogo.png" alt="EduHub Logo" className="home2logo" />
          <h1 className="title">EduHub - Add New Course</h1>
        </div>
      </header>

      
      <InstructorSidebar isOpen={sidebarVisible} />

      
      <div className={`mmain-content ${sidebarVisible ? "shifted" : ""}`}>
        <Stepper activeStep={activeStep} alternativeLabel>
          {steps.map((label) => (
            <Step key={label}>
              <StepLabel>{label}</StepLabel>
            </Step>
          ))}
        </Stepper>

        <div className="step-content">
          {activeStep === steps.length ? (
            <div>
              <h2>Course Added Successfully!</h2>
              <div className="stepper-buttons">
                <button onClick={handleReset}>Add Another Course</button>
              </div>
            </div>
          ) : (
            <div>
              {renderStepContent(activeStep)}
              <div className="stepper-buttons">
                {activeStep !== 0 && <button onClick={handleBack}>Back</button>}
                <button onClick={handleNext}>
                  {activeStep === steps.length - 1 ? "Complete" : "Next"}
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default AddCourse;

