package com.eduhub.userservice.security;

import com.eduhub.userservice.security.jwt.AuthEntryPointJwt;
import com.eduhub.userservice.security.jwt.AuthTokenFilter;
import com.eduhub.userservice.security.services.UserDetailsServiceImpl;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableMethodSecurity
@RequiredArgsConstructor
// (securedEnabled = true,
// jsr250Enabled = true,
// prePostEnabled = true) // by default
public class WebSecurityConfig {
    private final UserDetailsServiceImpl userDetailsService;
    private final AuthEntryPointJwt unauthorizedHandler;

    @Bean
    public AuthTokenFilter authenticationJwtTokenFilter() {
      return new AuthTokenFilter();
    }

  //@Override
  //public void configure(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {
  //  authenticationManagerBuilder.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
  //}

    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
      DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();

      authProvider.setUserDetailsService(userDetailsService);
      authProvider.setPasswordEncoder(passwordEncoder());

      return authProvider;
    }

  //@Bean
  //@Override
  //public AuthenticationManager authenticationManagerBean() throws Exception {
  //  return super.authenticationManagerBean();
  //}

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {
      return authConfig.getAuthenticationManager();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
      return new BCryptPasswordEncoder();
    }

  //@Override
  //protected void configure(HttpSecurity http) throws Exception {
  //  http.cors().and().csrf().disable()
  //    .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()
  //    .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()
  //    .authorizeRequests().antMatchers("/api/auth/**").permitAll()
  //    .antMatchers("/api/test/**").permitAll()
  //    .anyRequest().authenticated();
  //
  //  http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);
  //}

//    @Bean
//    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
//      http.csrf(csrf -> csrf.disable())
//          .exceptionHandling(exception -> exception.authenticationEntryPoint(unauthorizedHandler))
//          .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
//          .authorizeHttpRequests(auth -> auth.requestMatchers("/api/auth/**").permitAll()
//                  .requestMatchers("/api/test/**").permitAll()
//                  .anyRequest().authenticated());
//      http.authenticationProvider(authenticationProvider());
//      http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);
//      return http.build();
//    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                // CSRF protection enabled
                .csrf(csrf -> csrf.ignoringRequestMatchers("/api/auth/**", "/api/test/**"))
                // Exception handling for unauthorized requests
                .exceptionHandling(exception -> exception.authenticationEntryPoint(unauthorizedHandler))
                // Session management policy
                .sessionManagement(session -> session
                        .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED) // Default behavior
                        .maximumSessions(1) // Limit to 1 session per user
                        .expiredUrl("/session-expired.html") // Redirect to this URL when the session expires
                )
                // Authorize HTTP requests
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/", "/login**", "/oauth2/**").permitAll()
                        .anyRequest().authenticated() // All other requests must be authenticated
                )
                .oauth2Login(oauth2 -> oauth2
                        .loginPage("/oauth2/authorization/google") // Redirect to Google login by default
                        .defaultSuccessUrl("/user")  // Redirect to /user after login
                ) // Enable OAuth2 login
                // Add Content Security Policy (CSP) header using the new builder-based API
                .headers(headers -> headers.contentSecurityPolicy(policy -> policy
                                .policyDirectives("default-src 'self'; script-src 'self' 'unsafe-inline'; object-src 'none'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:")));
        // Add custom authentication provider and JWT filter
        http.authenticationProvider(authenticationProvider());
        http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);
        return http.build();
    }

}
